# github repository actions 페이지에 나타날 이름
name: GitHub Actions와 AWS CodeDeploy를 이용한 지속적인 통합과 지속적인 배포

# main이나 master 브랜치에 push 이벤트가 발생하면 Workflow가 시작
on:
  push:
    branches: [ "master", "main" ]

# Workflow가 repository의 컨텐츠를 읽을 수 있도록 권한을 설정
permissions:
  contents: read

# Workflow 내에서 실행할 작업들을 정의
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # GitHub repository의 소스 코드를 체크아웃
      # github actions에서 사용할 JDK 설정
      - uses: actions/checkout@v3
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 의존성을 캐시하여 빌드 시간을 단축
      - name: Gradle 의존성 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

        # master, main 브랜치에 푸시될 때 application.yml 파일을 생성하고, GitHub Secrets에서 설정 값을 파일에 작성
      - name: application.yml 파일 생성
        if: |
          contains(github.ref, 'master') ||
          contains(github.ref, 'main')
        run: |
          cd ./src/main/resources # resources 폴더로 이동
          touch ./application.yml # application.yml 생성
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      # gradlew 스크립트에 실행 권한을 부여한 후, Gradle을 사용하여 프로젝트를 빌드
      - name: gradlew 스크립트에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle을 사용하여 프로젝트 빌드
        run: ./gradlew build -x test

      # 빌드된 애플리케이션과 필요한 파일들을 ZIP 파일로 압축
      - name: ZIP 파일로 압축
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      # AWS credentials을 설정하여 AWS 서비스에 액세스
      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 zip 파일 업로드
      - name: S3에 zip 파일 업로드
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip --source .

      # AWS CodeDeploy를 사용해 애플리케이션을 배포, 배포 설정과 함께 S3에서 ZIP 파일을 가져와 배포를 실행
      - name: AWS CodeDeploy를 사용해 애플리케이션을 배포
        run: aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/$GITHUB_SHA.zip